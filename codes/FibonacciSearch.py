def fibonacci_search(arr, x):
    """
    Выполняет поиск элемента x в отсортированном массиве arr используя алгоритм поиска Фибоначчи.
    Возвращает индекс элемента, если он найден, иначе -1.
    """
    n = len(arr)

    # Находим наименьшее число Фибоначчи, большее или равное размеру массива n
    fib_m2, fib_m1 = 0, 1  # F(m-2) и F(m-1) - два предыдущих числа Фибоначчи
    fib_m = fib_m2 + fib_m1  # F(m) - текущее число Фибоначчи
    while fib_m < n:
        fib_m2, fib_m1 = fib_m1, fib_m  # Сдвигаем числа Фибоначчи по последовательности
        fib_m = fib_m2 + fib_m1         

    # Смещение для отслеживания уже проверенного диапазона в массиве
    offset = -1

    # Пока текущее число Фибоначчи больше 1
    while fib_m > 1:
        # Вычисляем индекс для сравнения, не выходя за границы массива
        i = min(offset + fib_m2, n - 1)

        # Если элемент в arr[i] меньше искомого x,
        # сдвигаем диапазон поиска вправо
        if arr[i] < x:
            fib_m, fib_m1, fib_m2 = fib_m1, fib_m2, fib_m - fib_m1
            offset = i
        
        # Если элемент в arr[i] больше искомого x,
        # сдвигаем диапазон поиска влево
        elif arr[i] > x:
            fib_m, fib_m1, fib_m2 = fib_m2, fib_m1 - fib_m2, fib_m - fib_m1
        
        # Если элемент равен искомому, возвращаем индекс
        else:
            return i

    # Проверка последнего возможного элемента в диапазоне
    if fib_m1 == 1 and offset + 1 < n and arr[offset + 1] == x:
        return offset + 1

    # Если элемент не найден, возвращаем -1
    return -1


# Пример использования функции
if __name__ == "__main__":
    arr = [10, 22, 35, 40, 45, 50, 80, 82, 85, 90, 100]
    x = 85
    print(f"Массив: {arr}")
    print(f"Ищем: {x}")

    result = fibonacci_search(arr, x)

    if result != -1:
        print(f"Элемент найден на позиции: {result}")
    else:
        print("Элемент не найден")
